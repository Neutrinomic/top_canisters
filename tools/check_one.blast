{"cells":[{"kind":2,"language":"javascript","value":"const AGGREGATOR_PAGE_SIZE = 10;\nconst SNS_AGGREGATOR_CANISTER_URL = 'https://3r4gx-wqaaa-aaaaq-aaaia-cai.icp0.io';\nconst AGGREGATOR_CANISTER_VERSION = 'v1';\n\nconst AGGREGATOR_URL = `${SNS_AGGREGATOR_CANISTER_URL}/${AGGREGATOR_CANISTER_VERSION}/sns`;\n\nconst aggregatorPageUrl = (page) => `list/page/${page}/slow.json`;\n\nconst querySnsAggregator = async (page = 0) => {\n    const response = await fetch(`${AGGREGATOR_URL}/${aggregatorPageUrl(page)}`);\n\n    if (!response.ok) {\n        // If the error is after the first page, is because there are no more pages it fails\n        if (page > 0) {\n            return [];\n        }\n\n        throw new Error('Error loading SNS projects from aggregator canister');\n    }\n\n    const data = await response.json();\n\n    if (data.length === AGGREGATOR_PAGE_SIZE) {\n        const nextPageData = await querySnsAggregator(page + 1);\n        return [...data, ...nextPageData];\n    }\n\n    return data;\n};\n\nconst snses = await querySnsAggregator();\n\n\nlet cans = {};\n\nfor (const sns of snses) {\n    let root = sns.canister_ids.root_canister_id;\n    for (const canister_id in sns.list_sns_canisters) {\n        let tcan = sns.list_sns_canisters[canister_id];\n\n        if (Array.isArray(tcan)) {\n            let idx = 0;\n            for (const can of tcan) {\n                cans[can] = {\n                    sns: root,\n                    name: sns.meta.name + \":\" + canister_id + \":\" + idx,\n                    appurl: \"https://dashboard.internetcomputer.org/sns/\"+root\n                }\n                idx++;\n            }\n            continue;\n        } else {\n            cans[tcan] = {\n                sns: root,\n                name: sns.meta.name + \":\" + canister_id,\n                appurl: \"https://dashboard.internetcomputer.org/sns/\"+root\n            }\n        }\n    }\n}\n\n\nglobal({cans});\n// log(cans)"},{"kind":2,"language":"javascript","value":"log(me)"},{"kind":2,"language":"javascript","value":"// ICPSWAP\n\nlet root = await ic(\"ggzvv-5qaaa-aaaag-qck7a-cai\");\nlet pd = await root.getAllPools();\n\nfor (let pool of pd) {\n    cans[pool.pool] = {\n        sns: \"csyra-haaaa-aaaaq-aacva-cai\",\n        name: \"ICPSWAP \" + pool.token1Symbol + \"/\" + pool.token0Symbol,\n        appurl: \"https://info.icpswap.com/swap/pool/details/\" + pool.pool\n    }\n\n    if (pool.pool == \"abr5f-hyaaa-aaaag-qjviq-cai\") cans[pool.pool].name = \"ICPSWAP ICP/RICH.OT\";\n}\n\n"},{"kind":2,"language":"javascript","value":"\n// ICDEX\nlet dex = await ic(\"i5jcx-ziaaa-aaaar-qaazq-cai\");\nlet pairs = await dex.getPairs(undefined, undefined);\n\nfor (let pair of pairs.data) {\n    cans[pair[0]] = {\n        sns: \"hjcnr-bqaaa-aaaaq-aacka-cai\",\n        name: \"ICDex \" + pair[1].token0[1] + \"/\" + pair[1].token1[1],\n        appurl: \"https://icdex.io/ICDex/\"+pair[1].token0[1]+\"/\"+pair[1].token1[1]\n    }\n}\n// log(pairs)"},{"kind":2,"language":"javascript","value":"// Neutrinite\nlet aggr = await ic(\"u45jl-liaaa-aaaam-abppa-cai\");\n\nlet conf = await aggr.get_config();\n\nlet ntn = await ic(\"wxer6-3yaaa-aaaal-qjnua-cai\");\n\nlet pools = await ntn.list_pairs();\nfunction findLedgerName(id) {\n    return conf.tokens.find(x => x.ledger?.icrc1?.ledger.toText() === id)?.symbol || id;\n};\n\nfor (let pool of pools) {\n    let found = {\n        sns: \"extk7-gaaaa-aaaaq-aacda-cai\",\n        name: \"Neutrinite:\" + findLedgerName(pool.init_args.LEFT_ledger.toText()) + \"/\" + findLedgerName(pool.init_args.RIGHT_ledger.toText()),\n        appurl: \"https://vectors.icpcoins.com/\"\n    };\n   \n    cans[pool.canister_id] = found\n}\n// log(pools)"},{"kind":2,"language":"javascript","value":"// SET KNOWN CANISTERS\n\nlet scanner = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\nlet known = Object.keys(cans).map(id => {\n    return [id, {...cans[id], icrc: [], hidden:false}]\n});\n// log(known)\nawait scanner.setKnownCanisters(known)"},{"kind":2,"language":"javascript","value":"let scanner = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\n\nlet ncans = [\n[\"mqygn-kiaaa-aaaar-qaadq-cai\",\"ckBTC minter\", \"https://dashboard.internetcomputer.org/bitcoin\"],\n[\"mxzaz-hqaaa-aaaar-qaada-cai\",\"ckBTC ledger\", \"https://dashboard.internetcomputer.org/bitcoin\"],\n[\"ss2fx-dyaaa-aaaar-qacoq-cai\",\"ckETH ledger\", \"https://dashboard.internetcomputer.org/ethereum\"],\n[\"sv3dd-oaaaa-aaaar-qacoa-cai\",\"ckETH minter\", \"https://dashboard.internetcomputer.org/ethereum\"],\n[\"xevnm-gaaaa-aaaar-qafnq-cai\",\"ckUSDC ledger\", \"https://dashboard.internetcomputer.org/ethereum/xevnm-gaaaa-aaaar-qafnq-cai\"],\n[\"ryjl3-tyaaa-aaaaa-aaaba-cai\", \"ICP ledger\"],\n[\"rrkah-fqaaa-aaaaa-aaaaq-cai\", \"NNS\", \"https://dashboard.internetcomputer.org/governance\"],\n[\"rdmx6-jaaaa-aaaaa-aaadq-cai\", \"Identity\"],\n[\"rkp4c-7iaaa-aaaaa-aaaca-cai\", \"Cycles Management\"],\n[\"um5iw-rqaaa-aaaaq-qaaba-cai\", \"Cycles Ledger\"],\n[\"ryjl3-tyaaa-aaaaa-aaaba-cai\", \"ICP ledger\"],\n[\"gkd3b-iaaaa-aaaar-qab2a-cai\", \"Taler\"],\n[\"xsojl-5aaaa-aaaam-qbceq-cai\", \"DCD Airdrop\"],\n[\"n2xex-iyaaa-aaaar-qaaeq-cai\", \"Dfinity\"],\n[\"aclt4-uaaaa-aaaak-qb4zq-cai\", \"Volt\"],\n[\"vahkw-kaaaa-aaaal-acaza-cai\", \"Infinity Swap\", \"https://www.infinityswap.finance/\"],\n[\"utozz-siaaa-aaaam-qaaxq-cai\", \"WICP\"],\n[\"r43hs-lqaaa-aaaak-afoca-cai\", \"ICLighthouse Airdrop\"],\n[\"eo2vl-tyaaa-aaaah-adtfa-cai\", \"Sonic Airdrop\", \"https://sonic.ooo/\", \"qtooy-2yaaa-aaaaq-aabvq-cai\"],\n[\"3xwpq-ziaaa-aaaah-qcn4a-cai\", \"Sonic Swap\", \"https://sonic.ooo/\", \"qtooy-2yaaa-aaaaq-aabvq-cai\"]\n];\n\n\nawait scanner.setKnownCanisters(\n    ncans.map(x => {\n        return [x[0], {name: x[1], icrc: [], appurl:x[2]?x[2]:undefined, sns:x[3]?x[3]:undefined, hidden:false}]\n    }));\n"},{"kind":2,"language":"javascript","value":"// STATS\nlet aggr = await ic(\"u45jl-liaaa-aaaam-abppa-cai\");\n\nlet conf = await aggr.get_config();\n\nlet can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\nlet rez = await can.getAccounts();\n\nlet acstats = rez.map(x => {\n    let y = toState(x);\n    return ` ${y.id} accs:${y.accounts.length} at_block:${y.reader.last_indexed_tx} last_block_time:${new Date(y.reader.lastTxTime / 1000000).toLocaleDateString()}`\n})\n\n// get total blocks processed\nlet blocks = rez.map(x => {\n    let y = toState(x);\n    return Number(y.reader.last_indexed_tx)\n}).reduce((a, b) => a + b, 0);\n\nlet errs = (await can.getErrors()).map((x,_idx) => [rez[_idx].id, x]);\nlog(acstats[acstats.length-1]);\nlog(errs[errs.length-1]);\nlog(blocks)\n\nlog(acstats);\n\n\n\nlog(errs)\n"},{"kind":2,"language":"javascript","value":"let aggr = await ic(\"u45jl-liaaa-aaaam-abppa-cai\");\nlet prices = await aggr.get_latest_extended();\n\nlet dust = {};\nfor (let price of prices) {\n    if (!price.config?.ledger?.icrc1?.ledger) continue;\n    let id = price.config?.ledger?.icrc1?.ledger.toText();\n    let rate = price.rates.find(x => x.to_token == 0);\n    if (!rate) continue;\n    dust[id] = BigInt(Math.round(((1/rate?.rate)*500)*(10**Number(price.config.decimals))));\n}\n\nlog(dust)\nglobal({dust});"},{"kind":2,"language":"javascript","value":"let can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\nlet vectors = await ic(\"wxer6-3yaaa-aaaal-qjnua-cai\");\nlet v = await vectors.list_pairs();\n\nfor (let vec of v) {\n    await can.add_vector_addresses(vec.canister_id).then(log)\n}\n\n"},{"kind":2,"language":"javascript","value":"let can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\nlet aggr = await ic(\"u45jl-liaaa-aaaam-abppa-cai\");\n\nlet conf = await aggr.get_config();\nlet used = conf.tokens.map(x => x.ledger?.icrc1?.ledger).filter(Boolean); // filter(x => \"sns\" in x.locking && x.deleted == false)\n \n// remove duplicates in array, make it unique \nused = [...new Set(used)];\nlog(used.length)\nlog(used)\n\nlet bad_ledgers = [\n    \"imeri-bqaaa-aaaai-qnpla-cai\",\n    \"2vgyc-jqaaa-aaaao-a2gdq-cai\",\n    \"6qfxa-ryaaa-aaaai-qbhsq-cai\",\n    \"ar64g-5yaaa-aaaan-qeoaq-cai\",\n    \"7tx3o-zyaaa-aaaak-aes6q-cai\",\n    \"onxlw-tiaaa-aaaan-qedoq-cai\",\n    \"a6a37-7yaaa-aaaai-qpeuq-cai\",\n    \"iozql-7iaaa-aaaah-advvq-cai\",\n    \"iwv6l-6iaaa-aaaal-ajjjq-cai\",\n    \"wkv3f-iiaaa-aaaap-ag73a-cai\",\n    \"eayyd-iiaaa-aaaah-adtea-cai\",\n    \"rh2pm-ryaaa-aaaan-qeniq-cai\",\n    \"zzsnb-aaaaa-aaaap-ag66q-cai\",\n    \"edypu-bqaaa-aaaak-afknq-cai\"\n    \n];\nfor (let ledger of used) {\n    if (bad_ledgers.indexOf(ledger.toText()) !== -1) continue;\n    let multi = dust[ledger.toText()];\n    await can.add_ledger(ledger, multi).then(log);\n}\n"},{"kind":2,"language":"javascript","value":"let can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\n// await can.add_ledger(\"rh2pm-ryaaa-aaaan-qeniq-cai\", 10000).then(log);"},{"kind":2,"language":"javascript","value":"let scanner = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\n//await scanner.add_ledger(\"rh2pm-ryaaa-aaaan-qeniq-cai\", 10000);\n\nawait scanner.rem_ledger(\"edypu-bqaaa-aaaak-afknq-cai\");"},{"kind":2,"language":"javascript","value":"\nlet can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\n// await can.add_ledger(\"mxzaz-hqaaa-aaaar-qaada-cai\", 10000)\n// await can.add_ledger(\"ss2fx-dyaaa-aaaar-qacoq-cai\", 10000)\n// await can.add_ledger(\"xevnm-gaaaa-aaaar-qafnq-cai\", 10000)\n// await can.add_ledger(\"cngnf-vqaaa-aaaar-qag4q-cai\", 10000)\n\n// await can.add_ledger(\"g4tto-rqaaa-aaaar-qageq-cai\", 10000);"},{"kind":2,"language":"javascript","value":"let can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\n\nawait can.getEventsBwd( Math.round(Date.now()/ 1000)<<32, 1000).then(log)\nawait can.getEventsFwd( 1676028374<<32, 1000).then(log)"},{"kind":2,"language":"javascript","value":"let can = await ic(\"p2clb-ryaaa-aaaal-qjpia-cai\");\n\nawait can.stats().then(log);"}]}